// Order of classes: DataBase, DataBaseArray, DataBaseRecord, IndexArray, IndexRecord, DeleteStack

/* Choosing option #1--DeleteStack
 * 
 * The DataBase stores student records using a DataBaseArray and 3 IndexArrays.
 * This file creates DataBaseArray, IndexArray, DeleteStack objects defined in other files.
 * Reads in data from file, defines methods for adding, finding, and deleting records
 * and displaying them in ascending or descending order by last name, first name, and ID# */

import java.io.*;
import java.util.*;

public class DataBase {
   
    //create objects to use
    private DataBaseArray myDB;
    private IndexArray Last, First, ID;
    private DeleteStack delStack;
    
    Scanner keyboard = new Scanner(System.in);
   
    public DataBase() {
    	
    	//create DataBaseArray, IndexArrays, DeleteStack defined in other files
        myDB = new DataBaseArray(100);
        
        Last = new IndexArray(100);
        First = new IndexArray(100);
        ID = new IndexArray(100);
        
        delStack = new DeleteStack(100);
                
        //read student data from file to add to database
        try {
        	FileInputStream fiStream = new FileInputStream("data.txt");
        	Scanner fileReader = new Scanner(fiStream);
		
        	//fetch last name, first name, id # from each line
        	while (fileReader.hasNext()) {
        		String lastName = fileReader.next();
        		String firstName = fileReader.next();
        		String id = fileReader.next();
          
        		//call add method to create DataBaseRecord and IndexRecords with student info, add to database
        		addIt(lastName, firstName, id);
        	}
        	fileReader.close();
    	}
    	catch (FileNotFoundException e) {
    		e.printStackTrace();
    	}
    }
    
    
    /* This method is called by the constructor (reading data from file)
     * and by the other addIt method (receiving input from user). */
    
    //if ID is not in use, add inputs to DataBaseArray and IndexArray 
	public void addIt(String ln, String fn, String id) {
		boolean idIsAvailable = true;
		if(ID.getSize() > 0) {
			idIsAvailable = (ID.find(id) == -1); //should be false when id is in use
		}
		if(idIsAvailable) {
			int indexToPlaceAt;
			boolean newIndex = false;
			if (delStack.isEmpty()) { //assign a new index to the DataBaseRecord
				indexToPlaceAt = myDB.getSize();
				newIndex = true; 
			}
			else { //reassign an old index to the new DataBaseRecord
				indexToPlaceAt = delStack.pop();
			}
			//create DataBaseRecord and IndexRecords using given parameters
			DataBaseRecord dbr = new DataBaseRecord(ln, fn, id);
			IndexRecord lnIr = new IndexRecord(ln, indexToPlaceAt);
			IndexRecord fnIr = new IndexRecord(fn, indexToPlaceAt);
			IndexRecord idIr = new IndexRecord(id, indexToPlaceAt);
			
			//add DataBaseRecord to DataBaseArray
			//assign record to new index if stack was empty, popped index otherwise
			if(newIndex) myDB.addIt(dbr);
			else myDB.addIt(dbr, indexToPlaceAt);
			
			//add IndexRecords to IndexArray
			Last.insert(lnIr);
			First.insert(fnIr);
			ID.insert(idIr);
			
			//confirm addition of records
			System.out.println("Added!");
		}
		//if ID is in use, don't add record, and return to menu
		else System.out.println("ID is already in use!");
	}
	
	/* This method is for when the when user is adding more students.
	 * Get info for record from user, call addIt with arguments. */
	public void addIt() {
		String ln = ""; String fn = ""; String id = "";
		System.out.print("Enter a last name, first name, and ID on one line, separated by whitespace: ");
		if(keyboard.hasNext()) {
			ln = keyboard.next();
			fn = keyboard.next();
			id = keyboard.next();
		}
		addIt(ln, fn, id);
	}
	
	//prints DataBaseRecord with ID requested by user
	public void findIt() {
		System.out.print("Enter the ID of the person you would like to find: ");
		String id = "";
		id = keyboard.next();
		
		int indexOfKey = ID.find(id); //returns index of key in the IndexArray
		
		if(indexOfKey == -1) System.out.println("ID not found");
		else {
			int where = ID.find(indexOfKey); //returns where of the DataBaseRecord in the DataBaseArray
			String dbRecordString = myDB.getDataBaseRecordToString(where); //returns toString for DataBaseRecord
			System.out.println(dbRecordString);
		}
	}
	
	//removes records for student of specified ID, pushes former index of DataBaseRecord onto DeleteStack
	public void deleteIt() {
		System.out.print("Enter the ID of the person to delete: ");
		String id = "";
		id = keyboard.next();
		
		int indexOfKey = ID.find(id); //returns index of key in the IndexArray
		
		if(indexOfKey == -1) System.out.println("ID not found");
		else {
			int where = ID.find(indexOfKey); //returns where of the DataBaseRecord in the DataBaseArray
			String ln = myDB.getLastName(where);
			String fn = myDB.getFirstName(where);
			
			//delete from IndexArrays
			Last.delete(ln);
			First.delete(fn);
			ID.delete(id);
			
			/* "delete" from DataBaseArray
			 * If DeleteStack isn't full, push former index of DataBaseRecord onto it,
			 * marking the index as available to be overwritten with a new record. */
			if(!delStack.isFull()) delStack.push(where);
			System.out.println("Deleted");
		}
	}
	
	//print DataBaseRecords by attribute, ascending
	public void ListAscending(IndexArray ia) {
		ia.iteratorInitFront();
		while(ia.hasNext()) {
			System.out.println(myDB.getDataBaseRecordToString(ia.getNext()));
		}
	}
	public void ListByIDAscending() {
		ListAscending(ID);
	}
	public void ListByLastAscending() {
		ListAscending(Last);
	}
	public void ListByFirstAscending() {
		ListAscending(First);
	}
	
	//print DataBaseRecords by attribute, descending
	public void ListDescending(IndexArray ia) {
		ia.iteratorInitBack();
		while(ia.getIter() > -1) {
			System.out.println(myDB.getDataBaseRecordToString(ia.getPrevious()));
		}
	}
	public void ListByIDDescending() {
		ListDescending(ID);
	}
	public void ListByLastDescending() {
		ListDescending(Last);
	}
	public void ListByFirstDescending() {
		ListDescending(First);
	}
}






/* DataBaseArray is an array of DataBaseRecords, ordered by when they were placed into it.
 * New records may replace previously deleted records' indices due to DeleteStack. */

    public class DataBaseArray {
	
	private DataBaseRecord[] dbArray;
	private int size = 0; //next unused index in DataBaseArray, not necessarily number of records
	
	//constructors
	public DataBaseArray(){
		dbArray = new DataBaseRecord[100];
	}
	public DataBaseArray(int sz) {
		dbArray = new DataBaseRecord[sz];
	}
	
	//add DataBaseRecord to DataBaseArray
	//using new index
	public void addIt(DataBaseRecord dbr) {
		dbArray[size] = dbr;
		size++;
	}
	//add DataBaseRecord to DataBaseArray
	//re-using old index in DataBaseArray (DeleteStack was popped)
	public void addIt(DataBaseRecord dbr, int where) {
		dbArray[where] = dbr;
		//don't increment size--it points to the next unused index in DataBaseArray
	}
	
	//getters
	public int getSize() {
		return size;
	}
	//get attributes from specific DataBaseRecord
	public String getLastName(int where) {
		return dbArray[where].getLastName();
	}
	public String getFirstName(int where) {
		return dbArray[where].getFirstName();
	}
	//gets toString for specified DataBaseRecord
	public String getDataBaseRecordToString(int where) {
		return dbArray[where].toString();
	}
}






/* DataBaseRecord is an element of the DataBaseArray.
 * It contains a last name, a first name, and an ID# of a student. */

public class DataBaseRecord {
	 private String lastName;
	 private String firstName;
	 private String id;
	 
	 //constructors
	 DataBaseRecord(String a, String b, String c){
	     	lastName = new String(a);
	     	firstName = new String(b);
	     	id = new String(c);
	 }  
	 public String toString(){
		 return lastName + " " + firstName + " " + id;
	 }
	 
	 //getters
	 public String getLastName() {
		return lastName;
	 }
	 public String getFirstName() {
		return firstName;
	 }
	 /* ID# is the one guaranteed unique attribute, so its constructor is not needed.
	  * ID# will be used to locate the desired last name and first name. */
}






/* This file creates an array of IndexRecords by implementing an OrderedArray.
 * Three Index Arrays will be created, one for each: first name, last name, and ID. */

public class IndexArray {
	
        private IndexRecord[] iArray;
        private int size;
        private int iter;  //used to traverse the array
    
        //constructors
	public IndexArray() {
	     	iArray = new IndexRecord[100]; //default size 100
	     	size = 0;
	}
	public IndexArray(int sz) {
	     	iArray = new IndexRecord[sz];
	     	size = 0;
	}

	//insertion loop - insert IndexRecord into IndexArray 
	public void insert(IndexRecord key) {
	    	int j;
	    	for(j = size - 1; j >= 0 ; j--){
	        	if ((iArray[j].compareTo(key)) < 0) break;
	        	iArray[j + 1] = iArray[j];
	    	}
	    	iArray[j + 1] = key;
	    	size++;
	}

	/* binary search - returns index of key in the IndexArray
	* returns -1 if key is not found */
	public int find(String key) {
		int hi, lo, mid = 0;
	    	lo = 0;
	    	hi = size - 1;
            	while(lo <= hi){
        		mid=(lo + hi)/2;
	        	if (iArray[mid].getKey().compareTo(key) == 0) break;
	        	if(iArray[mid].getKey().compareTo(key) < 0)
	        		lo = mid + 1;
	        	else hi = mid - 1;
	    	}
	    	return((iArray[mid].getKey().compareTo(key) == 0) ? mid : -1 );
	}
	
	/* returns where of the DataBaseRecord in the DataBaseArray
	* 'where' is the index in the DataBaseArray and one data field of the corresponding IndexRecords. */
	public int find(int index) {
	    	int where = -1;
        	if(index != - 1) {
        		where = iArray[index].getWhere();
        	}
            	return where;
	}

	//removes IndexRecord from IndexArray
	public boolean delete(String key) {
		boolean retVal = true;
		int where;
	    	where = find(key);
	    	if(where != -1){
	        	for(int j= where + 1; j < size;j++) {
                		iArray[j - 1] = iArray[j];
	        	}
            		size--;
            	}
            	else retVal = false;
            	return(retVal);
    	}
	
	//The following methods are used when displaying records in order.
	
	//setting iterator in preparation for listing
	public void iteratorInitFront() {
		iter = 0;
	}
	public void iteratorInitBack() {
		iter = size - 1;
	}
	
	//check whether there is another IndexRecord in IndexArray
	public boolean hasNext() {
		return (iter < size); // size = last index + 1
		// returns true when iter <= highest index being used
	}
	
	//check whether IndexArray has more values of lesser index than current
	public boolean hasPrevious() {
		return (iter > 0);
	}
	
	//return where of current record, increment/decrement through array
	public int getNext() {
		return iArray[iter++].getWhere();
	}
	public int getPrevious() {
		return iArray[iter--].getWhere();
	}
	
	//getters
	public int getIter() {
		return iter;
	}
	public int getSize() {
		return size;
	}
}






/* IndexRecord is the key-where pair, an element of the IndexArrays for each attribute. */

public class IndexRecord{
	private String key; //the last name, first name, or ID#
	private int where; //refers to the index of the corresponding DataBaseRecord in the DataBaseArray
	
	//constructor
	public IndexRecord(String a, int b) {
		key = a;
		where = b;
	}
	
	//getters
	public String getKey() {
		return key;
	}
	public int getWhere() {
		return where;
	}
	
	//compares keys alphabetically for sorting
	public int compareTo(IndexRecord otherIR) {
		return key.compareTo(otherIR.key);
	}
}






/* When a DataBaseRecord is deleted, its index is pushed onto the DeleteStack
 * so the index can be reused when a new record is added. */

public class DeleteStack {

	private int [] data;
	private int next; //refers to the next index to be reused

	//constructors
	public DeleteStack ( ){     
		data = new int[100];       
		next = 0;                     
	}
	public DeleteStack (int sz){
		data = new int[sz];
		next = 0;
	}

	//We will check whether DeleteStack is empty before popping.
	public boolean isEmpty( ){
		return (next == 0);
	}

	//We will check that DeleteStack isn't full before pushing.
	public boolean isFull(){
		return (next == data.length);     
	}

	//add a value to stack
	public void push(int pushVal){
		data[next++] = pushVal;
		System.out.println("Stack pushed!");
	}

	//remove top value from stack
	public int pop(){
		System.out.println("Stack popped!");
		return(data[--next]);
	}
}